{"version":3,"sources":["components/VideoBackground/VideoBackground.jsx","pages/Pocetna/Pocetna.jsx","pages/NoMatch/NoMatch.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["style","width","height","position","top","left","zIndex","VideoBackground","state","resizeNotifier","_this2","this","react_default","a","createElement","lib_default","videoOptions","src","autoPlay","muted","loop","remeasureOnWindowResize","getResizeNotifier","setState","Component","Pocetna","Fragment","VideoBackground_VideoBackground","NoMatch","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAGMA,EAAQ,CACbC,MAAO,QACPC,OAAQ,QACRC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,QAAS,GAGWC,6MACpBC,MAAQ,CACPC,eAAgB,sFAER,IAAAC,EAAAC,KAQR,OACCC,EAAAC,EAAAC,cAAA,OAAKd,MAAOA,GACXY,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACCG,aAVkB,CACpBC,IAAK,sCACLC,UAAU,EACVC,OAAO,EACPC,MAAM,GAOJC,yBAAuB,EACvBC,kBAAmB,SAACb,GACnBC,EAAKa,SAAS,CACbd,8BAnBsCe,aCTxBC,mLAEnB,OACCb,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,SAAP,KACCd,EAAAC,EAAAC,cAACa,EAAD,cAJiCH,aCDhBI,mLAEnB,OACChB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBALiCU,aCGhBK,mLAEnB,OACCjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,SAAP,KACCd,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACClB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjCb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOG,UAAWL,aANUJ,aCObU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACC7B,EAAAC,EAAAC,cAAC4B,EAAD,OAEDC,SAASC,eAAe,SDqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2803d2b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Cover from 'react-video-cover';\n\nconst style = {\n\twidth: '100vw',\n\theight: '100vh',\n\tposition: 'fixed',\n\ttop: 0,\n\tleft: 0,\n\tzIndex: -1\n};\n\nexport default class VideoBackground extends Component {\n\tstate = {\n\t\tresizeNotifier: () => {}\n\t};\n\trender() {\n\t\tconst videoOptions = {\n\t\t\tsrc: 'http://omnia-web.com/omniaVideo.mp4',\n\t\t\tautoPlay: true,\n\t\t\tmuted: true,\n\t\t\tloop: true\n\t\t};\n\n\t\treturn (\n\t\t\t<div style={style}>\n\t\t\t\t<Cover\n\t\t\t\t\tvideoOptions={videoOptions}\n\t\t\t\t\tremeasureOnWindowResize\n\t\t\t\t\tgetResizeNotifier={(resizeNotifier) => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tresizeNotifier\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport VideoBackground from '../../components/VideoBackground/VideoBackground';\n\nexport default class Pocetna extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<VideoBackground />\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class NoMatch extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<br />\n\t\t\t\t<p>no</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Pocetna from './pages/Pocetna/Pocetna';\nimport NoMatch from './pages/NoMatch/NoMatch';\n\nexport default class App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Pocetna} />\n\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t</Switch>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}